Option Compare Database
Option Explicit

Private Sub btnAddNew_Click()
On Error GoTo Stop_Err
Dim ctl As Control
    
    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)
    
    For Each ctl In Me.Controls
        If TypeName(ctl) = "TextBox" Or TypeName(ctl) = "ComboBox" Or TypeName(ctl) = "OptionGroup" Then
            If ctl.BackColor = vbYellow Then
                ctl.BackColor = vbWindowBackground
            End If
        End If
    Next ctl
    
    If Me.Dirty Then
        Me.Dirty = False
    End If
    
    DoCmd.GoToRecord acForm, "frmRecordView", acNewRec
    Forms!frmRecordView.Auto_Header0.Caption = "Add New Record"
    'undo "new record" that was created by accident to truly create a new blank record
    Me.Undo
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnAllExceptions_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenQuery "qryExceptions", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acQuery, "qryExceptions"

    strQueryName = "qryExceptions"
    DoCmd.OpenForm "frmReportDates"

'    DoCmd.OpenForm "frmReportView", acFormDS
'    Forms!frmReportView.RecordSource = "qryExceptions"
'    Forms!frmReportView.Refresh
'    Forms!frmReportView.Comment.ColumnHidden = True

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnAllFlagged_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenQuery "qryCriticalFlags", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acQuery, "qryCriticalFlags"

    DoCmd.OpenForm "frmReportView", acFormDS
    Forms!frmReportView.RecordSource = "qryCriticalFlags"
'    Forms!frmReportView.Refresh
    Forms!frmReportView.InitialVerificationRequest.ColumnHidden = True
    Forms!frmReportView.MLORetentionEmailSentDate.ColumnHidden = True
'    Forms!frmReportView.ComplianceTechName.ColumnHidden = True
    Forms!frmReportView.BusCardCriticalNote.ColumnHidden = True
    Forms!frmReportView.FollowUpDate.ColumnHidden = True
    Forms!frmReportView.Department.ColumnHidden = True
    Forms!frmReportView.DateLastModified.ColumnHidden = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnAllInProcess_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenQuery "qryInProcess", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acQuery, "qryInProcess"

    DoCmd.OpenForm "frmReportView", acFormDS
    Forms!frmReportView.RecordSource = "qryInProcess"
'    Forms!frmReportView.Refresh
    Forms!frmReportView.Comment.ColumnHidden = True
'    Forms!frmReportView.ComplianceTechName.ColumnHidden = True
    Forms!frmReportView.Department.ColumnHidden = True
    Forms!frmReportView.DateLastModified.ColumnHidden = True
    


Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnAllLAMLOs_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenQuery "qryLoanAdminMLOs", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acQuery, "qryLoanAdminMLOs"

    DoCmd.OpenForm "frmReportView", acFormDS
    Forms!frmReportView.RecordSource = "qryLoanAdminMLOs"
'    Forms!frmReportView.Refresh
    Forms!frmReportView.Comment.ColumnHidden = True
    Forms!frmReportView.InitialVerificationRequest.ColumnHidden = True
    Forms!frmReportView.MLORetentionEmailSentDate.ColumnHidden = True
    Forms!frmReportView.ComplianceTechName.ColumnHidden = True
    Forms!frmReportView.BusCardCriticalNote.ColumnHidden = True
    Forms!frmReportView.FollowUpDate.ColumnHidden = True
    Forms!frmReportView.CurrentBranch.ColumnHidden = True
    Forms!frmReportView.ToBranch.ColumnHidden = True
    Forms!frmReportView.TPEStatus.ColumnHidden = True
'    Forms!frmReportView.TPEGroup.ColumnHidden = True
    Forms!frmReportView.VerificationDeadlineDate.ColumnHidden = True
'    Forms!frmReportView.Department.ColumnHidden = True
    Forms!frmReportView.DateLastModified.ColumnHidden = True

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnAllPromotions_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenQuery "qryPromotions", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acQuery, "qryPromotions"

    strQueryName = "qryPromotions"
    DoCmd.OpenForm "frmReportDates"

'    DoCmd.OpenForm "frmReportView", acFormDS
'    Forms!frmReportView.RecordSource = "qryPromotions"
'    Forms!frmReportView.Refresh
'    Forms!frmReportView.Comment.ColumnHidden = True

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnAllTransfers_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenQuery "qryTransfers", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acQuery, "qryTransfers"

    strQueryName = "qryTransfers"
    DoCmd.OpenForm "frmReportDates"
    
'    DoCmd.OpenForm "frmReportView", acFormDS
'    Forms!frmReportView.RecordSource = "qryTransfers"
'    Forms!frmReportView.Refresh
'    Forms!frmReportView.Comment.ColumnHidden = True

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnDateLastModified_Click()

    strQueryName = "qryDateLastModified"
    DoCmd.OpenForm "frmReportDates"

End Sub

Private Sub btnDeleteRecord_Click()
On Error GoTo Stop_Err

'    If Me.Dirty Then
'        If MsgBox("Do you wish to delete this record?", vbYesNo, "Delete Confirmation") = vbYes Then
'            If MsgBox("Are you SURE you want to delete this record?" & vbCrLf & _
'                "This will permanently delete the record.", vbYesNo, "2nd Delete Confirmation") = vbYes Then
'                    Me.Undo
'            End If
'        End If
'    End If
'    If Not Me.NewRecord Then
'       If MsgBox("Do you wish to delete this record?", vbYesNo, "Delete Confirmation") = vbYes Then
'            If MsgBox("Are you SURE you want to delete this record?" & vbCrLf & _
'                "This will permanently delete the record.", vbYesNo, "2nd Delete Confirmation") = vbYes Then
'                    DoCmd.RunCommand acCmdDeleteRecord
'            End If
'        End If
'        Me.Undo
'    End If

    Call CompletedTagCheck
    Call CheckFollowUpDate
    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)
    
    
    DoCmd.SetWarnings False
    
    If MsgBox("Do you wish to delete this record?", vbYesNo, "Delete Confirmation") = vbYes Then
            If MsgBox("Are you SURE you want to delete this record?" & vbCrLf & _
                "This will permanently delete the record.", vbYesNo, "2nd Delete Confirmation") = vbYes Then
                    If Me.NewRecord And Me.Dirty Then
                        Me.Undo
                    Else
                        DoCmd.RunCommand acCmdDeleteRecord
                        
                    End If
'                    If Not Me.NewRecord Then
'                        DoCmd.RunCommand acCmdDeleteRecord
'                    End If
            End If
        End If
    
'    Me.Undo
    
    DoCmd.SetWarnings True
    
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
    
End Sub

Private Sub btnDocuments_Click()
On Error GoTo Stop_Err

    If Me.Dirty Then
        Me.Dirty = False
    End If

    Dim strFolderPath As String
    Dim dtmFolderDate As Date
    Dim intResponse As Integer
    
    'Confirm date exists
    If Len(Me.txtInitialDateNotified_HR & vbNullString) > 0 Then
        dtmFolderDate = CDate(Me.txtInitialDateNotified_HR)
    ElseIf Len(Me.txtInitialDateNotified_LO & vbNullString) > 0 Then
        dtmFolderDate = CDate(Me.txtInitialDateNotified_LO)
    Else
        MsgBox "Please specify an Initial Notification Date!"
        Exit Sub
    End If
        
    'Create Folder Path
    strFolderPath = "R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\"
    strFolderPath = strFolderPath & Format(dtmFolderDate, "YYYY-MM") & "\" & Format(dtmFolderDate, "YYYY-MM-DD") & " " & Replace(Me.cboEmployeeName, ",", "")
    Debug.Print strFolderPath
'   strFolderPath = strFolderPath & Year(dtmFolderDate) &"\"& Format(dtmFolderDate, "YYYY-MM") &"\"& Format(dtmFolderDate, "YYYY-MM-DD") &""& Replace(Me.cboEmployeeName, ",", "")
    
    'Check if File Exists
    If Dir(strFolderPath, vbDirectory) = "" Then
        intResponse = MsgBox("Folder Path Not Found:  " & strFolderPath & vbCrLf & vbCrLf & "Would you like to create the file now?", vbYesNo)
        If intResponse = vbYes Then
            MkDir (strFolderPath)
            Application.FollowHyperlink strFolderPath
        Else
            Exit Sub
        End If
    Else
        Application.FollowHyperlink strFolderPath
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnLCTReport_Click()
On Error GoTo Stop_Err

    DoCmd.OpenForm "frmReportView", acFormDS
    Forms!frmReportView.RecordSource = "qryTechName"
'    Forms!frmReportView.Refresh
    Forms!frmReportView.Comment.ColumnHidden = True
    Forms!frmReportView.InitialVerificationRequest.ColumnHidden = True
    Forms!frmReportView.MLORetentionEmailSentDate.ColumnHidden = True
    Forms!frmReportView.BusCardCriticalNote.ColumnHidden = True
    Forms!frmReportView.FollowUpDate.ColumnHidden = True
    Forms!frmReportView.Department.ColumnHidden = True
    Forms!frmReportView.DateLastModified.ColumnHidden = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
    
End Sub

Private Sub btnNotCompleted_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenForm "frmReportView", acFormDS
'    Forms!frmReportView.RecordSource = "qryInProcess"
''    Forms!frmReportView.Refresh
'    Forms!frmReportView.Comment.ColumnHidden = True
''    Forms!frmReportView.ComplianceTechName.ColumnHidden = True
'    Forms!frmReportView.Department.ColumnHidden = True
    
    strQueryName = "qryNotCompleted"
    DoCmd.OpenForm "frmReportDates"
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub btnNoticeReceived_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenQuery "qryNoticeReceived", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acQuery, "qryNoticeReceived"

    DoCmd.OpenForm "frmReportView", acFormDS
    Forms!frmReportView.RecordSource = "qryNoticeReceived"
'    Forms!frmReportView.Refresh
    Forms!frmReportView.Comment.ColumnHidden = True
    Forms!frmReportView.Comment.ColumnHidden = True
    Forms!frmReportView.InitialVerificationRequest.ColumnHidden = True
    Forms!frmReportView.MLORetentionEmailSentDate.ColumnHidden = True
'    Forms!frmReportView.ComplianceTechName.ColumnHidden = True
    Forms!frmReportView.BusCardCriticalNote.ColumnHidden = True
    Forms!frmReportView.FollowUpDate.ColumnHidden = True
    Forms!frmReportView.Department.ColumnHidden = True
    Forms!frmReportView.DateLastModified.ColumnHidden = True

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnPrintRecord_Click()

    If Me.Dirty Then Me.Dirty = False
    DoCmd.OpenReport "rptPrintRecord", acViewPreview, , "[ID] = " & Me.txtRecordID
'    DoCmd.Close acForm, "frmRecordView"rmRecordView.[ID]
'    Forms!frmRecordView.Filter = "[ID] = " & Me.txtRecordID
'    Forms!frmRecordView.FilterOn = True

End Sub

Private Sub btnSaveRecord_Click()
Dim ctl As Control
On Error GoTo Stop_Err

    If Me.Dirty = True Then
        Me.txtDateLastModified = Now
        Me.Dirty = False
    End If

    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)

    If Me.cboEmployeeStatus = "Completed" Then
        Call CompletedTagCheck
    ElseIf Me.cboEmployeeStatus = "In Process" Then
        Call CheckFollowUpDate
    Else
        For Each ctl In Me.Controls
        If TypeName(ctl) = "TextBox" Or TypeName(ctl) = "ComboBox" Or TypeName(ctl) = "OptionGroup" Then
            If ctl.BackColor = vbYellow Then
                ctl.BackColor = vbWindowBackground
            End If
        End If
        Next ctl
        
        Me.btnSaveRecord.BackColor = RGB(197, 217, 241)

    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnSearchExisting_Click()
On Error GoTo Stop_Err

    If Me.Dirty Then
        Me.Dirty = False
    End If

    DoCmd.OpenForm "frmRecordSearch"
    DoCmd.Close acForm, "frmRecordView"

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnTPEMenu_Click()
On Error GoTo Stop_Err

    If Me.Dirty Then
        Me.Dirty = False
    End If
    DoCmd.OpenForm "frmTPEMenu"
    DoCmd.Close acForm, "frmRecordView"

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub btnViewAll_Click()
On Error GoTo Stop_Err

'    DoCmd.OpenTable "tblSafeActData", acViewNormal, acReadOnly
'    DoCmd.SelectObject acForm, "frmRecordView"
'    DoCmd.SelectObject acTable, "tblSafeActData"

    strQueryName = "qryViewAll"
    DoCmd.OpenForm "frmReportDates"

'    DoCmd.OpenForm "frmDatasheetView", acFormDS

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub

Private Sub cboCurrentBranch_AfterUpdate()
On Error GoTo Stop_Err
Dim bShow As Boolean
    
    
    bShow = Nz(Me.cboCurrentBranch, 0) > 5999 And Nz(Me.cboCurrentBranch, 0) < 7000
    'bShow = bShow Or (Nz(Me.cboCurrentBranch, 0) > 5999 And Nz(Me.cboCurrentBranch, 0) < 7000)

    If Me.chkLAMLOList = False Then
        If bShow Then
            If Me.cboToBranch > 6999 Or Me.cboToBranch < 6000 Then
                MsgBox "Please remove from LA MLO List."
            End If
        Else
            If Me.cboToBranch > 5999 And Me.cboToBranch < 7000 Then
                MsgBox "Please add to LA MLO List."
            End If
        End If
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub cboCurrentBranch_Excep_AfterUpdate()
On Error GoTo Stop_Err

Dim i As Integer

    If Me.cboCurrentBranch_Excep.ListIndex > -1 Then
    
        For i = 0 To Me.cboExcepApprovingVP.ListCount - 1
            If Me.cboExcepApprovingVP.Column(1, i) = CStr(Me.cboCurrentBranch_Excep) Then
                Me.cboExcepApprovingVP.Value = Me.cboExcepApprovingVP.ItemData(i)
                Exit For
            Else
                Me.cboExcepApprovingVP = "N/A"
            End If
        Next i
    
        For i = 0 To Me.cboExcepApprovingSVP.ListCount - 1
            If Me.cboExcepApprovingSVP.Column(2, i) = CStr(Me.cboCurrentBranch_Excep.Column(1) & vbNullString) Then
                Me.cboExcepApprovingSVP.Value = Me.cboExcepApprovingSVP.ItemData(i)
                Exit For
            Else
                Me.cboExcepApprovingSVP = "N/A"
            End If
        Next i
    
    Else
    
        Me.cboExcepApprovingVP = vbNullString
        Me.cboExcepApprovingSVP = vbNullString
    
    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub cboEmpID_AfterUpdate()
On Error GoTo Stop_Err
Dim strSQL As String
Dim strSQL_WHERE As String

    If Me.cboEmpID.ListIndex > -1 Then
        Me.cboEmployeeName = Me.cboEmpID.Column(1)
        Me.txtMLONumber = Me.cboEmpID.Column(2)
        If DCount("EmpID", "tblSafeActData", "[EmpID] = " & CLng(Me.cboEmpID)) > 0 Then
            If MsgBox("This Employee has multiple SAFE Act Entries.  Would you like to " & _
                "view another record now?", vbYesNo) = vbYes Then
                
                
                'Open the form
                DoCmd.OpenForm "frmMoreRecords", acNormal
                Forms!frmMoreRecords.frmMoreRecords_Sub.Form.Filter = "[EmpID] = " & CLng(Me.cboEmpID)
                Forms!frmMoreRecords.frmMoreRecords_Sub.Form.FilterOn = True
            End If
        End If
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub

Private Sub cboEmployeeGroup_AfterUpdate()
On Error GoTo Stop_Err

    Me.txtInitialDateNotified.Enabled = True
    Me.chkNotifiedByHR.Enabled = True
    Me.txtInitialDateNotified_LO.Enabled = True
    Me.txtInitialDateNotified_HR.Enabled = True
    Me.TabCtl0.Pages(0).Visible = True
    Me.TabCtl0.Pages(1).Visible = True
    Me.TabCtl0.Pages(2).Visible = True
    Me.TabCtl0.Pages(3).Visible = True

    If Me.cboEmployeeGroup = "Exception" Then
        'Me.txtInitialDateNotified_LO = vbNullString
'        Me.txtInitialDateNotified = vbNullString
        Me.chkNotifiedByHR.Value = False
        Me.txtInitialDateNotified_HR = vbNullString
        Me.txtInitialDateNotified_LO.Enabled = True
        Me.txtInitialDateNotified_HR.Enabled = False
        Me.TabCtl0.Pages(3).SetFocus
        Me.TabCtl0.Pages(0).Visible = False
        Me.TabCtl0.Pages(1).Visible = False
        Me.TabCtl0.Pages(2).Visible = False
        
    ElseIf Me.cboEmployeeGroup = "Promotion" Then
'        Me.txtInitialDateNotified = vbNullString
        Me.chkNotifiedByHR.Value = True
        Me.txtInitialDateNotified_LO = vbNullString
        'Me.txtInitialDateNotified_HR = vbNullString
        Me.txtInitialDateNotified_LO.Enabled = False
        Me.txtInitialDateNotified_HR.Enabled = True
        Me.TabCtl0.Pages(2).SetFocus
        Me.TabCtl0.Pages(0).Visible = False
        Me.TabCtl0.Pages(1).Visible = False
        Me.TabCtl0.Pages(3).Visible = False
        
    ElseIf Me.cboEmployeeGroup = "Transfer" Then
'        Me.txtInitialDateNotified = vbNullString
        Me.chkNotifiedByHR.Value = True
        Me.txtInitialDateNotified_LO.Enabled = False
        Me.txtInitialDateNotified_LO = vbNullString
        Me.txtInitialDateNotified_HR.Enabled = True
        Me.TabCtl0.Pages(0).SetFocus
'        Me.TabCtl0.Pages(1).Visible = False
        Me.TabCtl0.Pages(2).Visible = False
        Me.TabCtl0.Pages(3).Visible = False
        
    ElseIf Me.cboEmployeeGroup = "Hire/Rehire" Then
'        Me.txtInitialDateNotified = vbNullString
        Me.chkNotifiedByHR.Value = True
        Me.txtInitialDateNotified_LO = vbNullString
        'Me.txtInitialDateNotified_HR = vbNullString
        Me.txtInitialDateNotified_LO.Enabled = False
        Me.txtInitialDateNotified_HR.Enabled = True
        Me.TabCtl0.Pages(2).SetFocus
        Me.TabCtl0.Pages(2).Caption = "Hire/Rehire"
        Me.txtTPEDate_Promo.Visible = True
        Me.lblTPEDate_Promo.Visible = True
        Me.TabCtl0.Pages(0).Visible = False
        Me.TabCtl0.Pages(1).Visible = False
        Me.TabCtl0.Pages(3).Visible = False
        
    End If
    
    If Me.TabCtl0.Pages(0).Visible Then
        Me.TabCtl0.Pages(0).SetFocus
    End If
    
Stop_Exit:
    Exit Sub
Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub cboEmployeeName_AfterUpdate()
On Error GoTo Stop_Err

    If Me.cboEmployeeName.ListIndex > -1 Then
        Me.cboEmpID = Me.cboEmployeeName.Column(0)
        Me.txtMLONumber = Me.cboEmployeeName.Column(2)
        If DCount("EmpID", "tblSafeActData", "[EmpID] = " & CLng(Me.cboEmployeeName.Column(0))) > 0 Then
            If MsgBox("This Employee has multiple SAFE Act Entries.  Would you like to " & _
                "view another record now?", vbYesNo) = vbYes Then
                
                
                'Open the form
                DoCmd.OpenForm "frmMoreRecords", acNormal
                Forms!frmMoreRecords.frmMoreRecords_Sub.Form.Filter = "[EmpID] = " & CLng(Me.cboEmpID)
                Forms!frmMoreRecords.frmMoreRecords_Sub.Form.FilterOn = True
            End If
        End If
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub cboEmployeeStatus_AfterUpdate()
On Error GoTo Stop_Err

    If Me.cboEmployeeStatus = "Completed" Then
        Call CompletedTagCheck
    ElseIf Me.cboEmployeeStatus = "In Process" Then
        Call CheckFollowUpDate
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub chkHMDAFlag_AfterUpdate()
On Error GoTo Stop_Err

    If Me.chkHMDAFlag = False Then
        Me.txtLCSVPNotified = vbNullString
        Me.txtLCSVPNotified.Enabled = False
        Me.txtLCSVPCompleted = vbNullString
        Me.txtLCSVPCompleted.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub cboLATransferFlag_AfterUpdate()
On Error GoTo Stop_Err

    If Me.cboLATransferFlag = "N/A" Then
        Me.cboPostTransferMLO = "N/A"
        Me.frameLAMLORetention = 3
        Me.frameLAExceptionFormCompleted = 3
        Me.frameLAExceptionFormApproved = 3
        
    Else
        Me.cboPostTransferMLO = vbNullString
        Me.frameLAMLORetention = Null
        Me.frameLAExceptionFormCompleted = Null
        Me.frameLAExceptionFormApproved = Null
        
    End If
    
    Call frameLAMLORetention_AfterUpdate
    Call frameLAExceptionFormCompleted_AfterUpdate

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub

Private Sub cboPostTransferMLO_AfterUpdate()
On Error GoTo Stop_Err

    If Me.cboPostTransferMLO = "Inactive" Then
        Me.frameLAMLORetention = 3
        Me.frameLAExceptionFormCompleted = 3
        Me.frameLAExceptionFormApproved = 3
        Me.frameAlscomNotified_LA = 3
        
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub

Private Sub cboToBranch_AfterUpdate()
On Error GoTo Stop_Err
Dim bShow As Boolean
    
    bShow = Nz(Me.cboToBranch, 0) > 5999 And Nz(Me.cboToBranch, 0) < 7000
    'bShow = bShow Or (Me.cboCurrentBranch > 5999 And Me.cboCurrentBranch < 7000)
    If Me.chkPreConversionFlag = False Then
        If Me.chkLAMLOList = False Then
            If bShow Then
                If Me.cboCurrentBranch < 6000 Or Me.cboCurrentBranch > 6999 Then
                    MsgBox "Please add to LA MLO List"
                End If
            Else
                If Me.cboCurrentBranch > 5999 And Me.cboCurrentBranch < 7000 Then
                    MsgBox "Please remove from LA MLO List."
                End If
            End If
        End If
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub


Private Sub Form_Current()
On Error GoTo Stop_Err

    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)
    
    If Me.FilterOn Then
        If DLookup("[DataID]", "tblSafeActComments", "[DataID]=" & Nz(Me.txtRecordID, 0) & " AND [CriticalFlag]=True") > 0 Then
            Me.frmComments_Sub.BorderColor = vbRed
            Me.frmComments_Sub.BorderWidth = 2
        Else
            Me.frmComments_Sub.BorderColor = 10921638
            Me.frmComments_Sub.BorderWidth = 0
        End If
        
        Call cboCurrentBranch_AfterUpdate
        Call frameAlscomNotified_AfterUpdate
        Call frameAlscomNotified_LA_AfterUpdate
        Call frameNewEmailSig_AfterUpdate
        Call frameNewEmailSig_Excep_AfterUpdate
        Call frameNewEmailSig_Promo_AfterUpdate
        Call frameReplyEmailSig_AfterUpdate
        Call frameReplyEmailSig_Excep_AfterUpdate
        Call frameReplyEmailSig_Promo_AfterUpdate
        Call frameMU4RFlag_AfterUpdate
        Call frameMU4RFlag_Excep_AfterUpdate
        Call frameMU4RFlag_Promo_AfterUpdate
        Call frameLAMLORetention_AfterUpdate
        Call frameLAExceptionFormCompleted_AfterUpdate
        Call chkExcepHRNotified_AfterUpdate
        Call txtBusinessCardDate_AfterUpdate
        Call txtBusinessCardDate_Excep_AfterUpdate
        Call txtBusinessCardDate_Promo_AfterUpdate
        Call txtMU4RVerifiedDate_AfterUpdate
        Call txtMU4RVerifiedDate_Excep_AfterUpdate
        Call txtMU4RVerifiedDate_Promo_AfterUpdate
        Call txtNewEmailSigDate_AfterUpdate
        Call txtNewEmailSigDate_Excep_AfterUpdate
        Call txtNewEmailSigDate_Promo_AfterUpdate
        Call txtReplyEmailSigDate_AfterUpdate
        Call txtReplyEmailSigDate_Excep_AfterUpdate
        Call txtReplyEmailSigDate_Promo_AfterUpdate
        Call txtAlscomNoteSentDate_AfterUpdate
        Call txtAlscomNoteSentDate_LA_AfterUpdate
        Call txtRetentionSentDate_AfterUpdate
        Call txtLAExceptionSentDate_AfterUpdate
        Call txtExcepDateHRNotified_AfterUpdate
        Call cboEmployeeGroup_AfterUpdate
        Call txtInitialDateNotified_AfterUpdate
        Call PopulateDateNotified
        Call frameBusinessCards_AfterUpdate
        Call frameBusinessCards_Excep_AfterUpdate
        Call frameBusinessCards_Promo_AfterUpdate
        Call CompletedTagCheck
        Call CheckFollowUpDate
     Else
        Me.frmComments_Sub.BorderColor = 10921638
        Me.frmComments_Sub.BorderWidth = 0
        Call cboEmployeeGroup_AfterUpdate
    End If
    
    Me.cboEmpID.SetFocus

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub Form_DataChange(ByVal Reason As Long)
'DataChange(ByVal Reason As Long)
    'Me.txtDateLastModified = Now
    
End Sub

Private Sub Form_Dirty(Cancel As Integer)

    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)
    Me.txtDateLastModified = Now

End Sub

Private Sub Form_Load()
On Error GoTo Stop_Err

Dim ctl As Control

    For Each ctl In Me.Controls
        If TypeName(ctl) = "TextBox" Or TypeName(ctl) = "ComboBox" Or TypeName(ctl) = "OptionGroup" Then
            If ctl.BackColor = vbYellow Then
                ctl.BackColor = vbWindowBackground
            End If
        End If
    Next ctl
    
    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameAlscomNotified_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameAlscomNotified = 3 Then
        Me.txtAlscomNoteCompleteDate.Enabled = False
        Me.txtAlscomNoteSentDate.Enabled = False
        Me.txtAlscomNoteSentDate = vbNullString
        Me.txtAlscomNoteCompleteDate = vbNullString
    ElseIf Me.frameAlscomNotified = 1 Then
        If Len(Me.txtAlscomNoteSentDate & vbNullString) = 0 Then
            Me.txtAlscomNoteSentDate = Date
            Me.txtAlscomNoteCompleteDate.Enabled = True
            Me.txtAlscomNoteSentDate.Enabled = True
        End If
    Else
        Me.txtAlscomNoteCompleteDate.Enabled = True
        Me.txtAlscomNoteSentDate.Enabled = True
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub
Private Sub frameAlscomNotified_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameAlscomNotified = vbNullString
    Me.txtAlscomNoteCompleteDate = vbNullString
    Me.txtAlscomNoteCompleteDate.Enabled = True
    Me.txtAlscomNoteSentDate = vbNullString
    Me.txtAlscomNoteSentDate.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameAlscomNotified_LA_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameAlscomNotified_LA = 3 Then
        Me.txtAlscomNoteCompleteDate_LA.Enabled = False
        Me.txtAlscomNoteSentDate_LA.Enabled = False
        Me.txtAlscomNoteCompleteDate = vbNullString
        Me.txtAlscomNoteSentDate_LA = vbNullString
    ElseIf Me.frameAlscomNotified_LA = 1 Then
        If Len(Me.txtAlscomNoteSentDate_LA & vbNullString) = 0 Then
            Me.txtAlscomNoteSentDate_LA = Date
            Me.txtAlscomNoteCompleteDate_LA.Enabled = True
            Me.txtAlscomNoteSentDate_LA.Enabled = True
        End If
    Else
        Me.txtAlscomNoteCompleteDate_LA.Enabled = True
        Me.txtAlscomNoteSentDate_LA.Enabled = True
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub
Private Sub frameAlscomNotified_LA_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameAlscomNotified_LA = vbNullString
    Me.txtAlscomNoteCompleteDate_LA = vbNullString
    Me.txtAlscomNoteCompleteDate_LA.Enabled = True
    Me.txtAlscomNoteSentDate_LA = vbNullString
    Me.txtAlscomNoteSentDate_LA.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub
Private Sub frameBusinessCards_AfterUpdate()
On Error GoTo Stop_Err

    'If Len(Me.txtBusinessCardDate & vbNullString) > 0 And Me.txtBusinessCardDate = Date Then
        If Me.frameBusinessCards = 2 Or Me.frameBusinessCards = 3 Then
            Me.txtBusinessCardDate = vbNullString
            Me.txtBusinessCardDate.Enabled = False
'        ElseIf Me.frameBusinessCards = 1 Then
'            If Len(Me.txtBusinessCardDate & vbNullString) = 0 Then
'                Me.txtBusinessCardDate = Date
'                Me.txtBusinessCardDate.Enabled = True
'            End If
        ElseIf Me.frameBusinessCards = 1 Then
            Me.txtBusinessCardDate.Enabled = True
            If Me.TabCtl0.Pages(0).Visible = True Then
                If Me.cboEmployeeStatus = "Completed" Then
                    'Do Nothing
                ElseIf DCount("DataID", "tblSafeActComments", "[DataID]=" & Me.txtRecordID & " AND [CriticalFlag] = True") = 0 Then
                    MsgBox "Please remember to add a Critical Note!"
                End If
            End If
'            If Forms!frmRecordView!frmComments_Sub.Form!chkCriticalFlag = False Then
'                MsgBox "Please remember to add a Critical Note!"
'            End If
        End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
    
End Sub

Private Sub frameBusinessCards_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameBusinessCards = vbNullString
    Me.txtBusinessCardDate = vbNullString
    Me.txtBusinessCardDate.Enabled = True

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameBusinessCards_Excep_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameBusinessCards_Excep = 2 Or Me.frameBusinessCards_Excep = 3 Then
        Me.txtBusinessCardDate_Excep = vbNullString
        Me.txtBusinessCardDate_Excep.Enabled = False
'    ElseIf Me.frameBusinessCards_Excep = 1 Then
'        If Len(Me.txtBusinessCardDate_Excep & vbNullString) = 0 Then
'            Me.txtBusinessCardDate_Excep = Date
'            Me.txtBusinessCardDate_Excep.Enabled = True
'        End If
    ElseIf Me.frameBusinessCards_Excep = 1 Then
        Me.txtBusinessCardDate_Excep.Enabled = True
        If Me.TabCtl0.Pages(3).Visible = True Then
            If Me.cboEmployeeStatus = "Completed" Then
                    'Do Nothing
                ElseIf DCount("DataID", "tblSafeActComments", "[DataID]=" & Me.txtRecordID & " AND [CriticalFlag] = True") = 0 Then
                    MsgBox "Please remember to add a Critical Note!"
                End If
        End If
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub
Private Sub frameBusinessCards_Excep_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameBusinessCards_Excep = vbNullString
    Me.txtBusinessCardDate_Excep = vbNullString
    Me.txtBusinessCardDate_Excep.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameBusinessCards_Promo_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameBusinessCards_Promo = 2 Or Me.frameBusinessCards_Promo = 3 Then
        Me.txtBusinessCardDate_Promo = vbNullString
        Me.txtBusinessCardDate_Promo.Enabled = False
'    ElseIf Me.frameBusinessCards_Promo = 1 Then
'        If Len(Me.txtBusinessCardDate_Promo & vbNullString) = 0 Then
'            Me.txtBusinessCardDate_Promo = Date
'            Me.txtBusinessCardDate_Promo.Enabled = True
'        End If
    ElseIf Me.frameBusinessCards_Promo = 1 Then
        Me.txtBusinessCardDate_Promo.Enabled = True
        If Me.TabCtl0.Pages(2).Visible = True Then
            If Me.cboEmployeeStatus = "Completed" Then
                    'Do Nothing
                ElseIf DCount("DataID", "tblSafeActComments", "[DataID]=" & Me.txtRecordID & " AND [CriticalFlag] = True") = 0 Then
                    MsgBox "Please remember to add a Critical Note!"
                End If
        End If
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub
Private Sub frameBusinessCards_Promo_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameBusinessCards_Promo = vbNullString
    Me.txtBusinessCardDate_Promo = vbNullString
    Me.txtBusinessCardDate_Promo.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub


Private Sub chkExcepHRNotified_AfterUpdate()
On Error GoTo Stop_Err

    If Me.chkExcepHRNotified = False Then
'        Me.txtExcepDateHRNotified = vbNullString
'        Me.txtExcepDateHRNotified.Enabled = False
'    ElseIf Me.chkExcepHRNotified = True Then
'        Me.txtExcepDateHRNotified = Date
'        Me.txtExcepDateHRNotified.Enabled = True
'    Else
'        Me.txtExcepDateHRNotified.Enabled = True
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub chkExcepHRNotified_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.chkExcepHRNotified = vbNullString
    Me.txtExcepDateHRNotified = vbNullString
    Me.txtExcepDateHRNotified.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameLAExceptionFormApproved_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameLAExceptionFormApproved = 3 Then
        Me.txtLAExceptionCompleteDate.Enabled = False
        Me.txtLAExceptionCompleteDate = vbNullString
    ElseIf Me.frameLAExceptionFormApproved = 1 Then
        If Len(Me.txtLAExceptionCompleteDate & vbNullString) = 0 Then
            Me.txtLAExceptionCompleteDate = Date
            Me.txtLAExceptionCompleteDate.Enabled = True
        End If
    Else
        Me.txtLAExceptionCompleteDate.Enabled = True
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameLAExceptionFormApproved_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameLAExceptionFormApproved = vbNullString
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameLAExceptionFormCompleted_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameLAExceptionFormCompleted = 3 Then
        Me.txtLAExceptionSentDate.Enabled = False
        Me.txtLAExceptionSentDate = vbNullString
        Me.frameLAExceptionFormApproved = 3
        Call frameLAExceptionFormApproved_AfterUpdate
    ElseIf Me.frameLAExceptionFormCompleted = 1 Then
        If Len(Me.txtLAExceptionSentDate & vbNullString) = 0 Then
            Me.txtLAExceptionSentDate = Date
            Me.txtLAExceptionSentDate.Enabled = True
            Me.txtLAExceptionCompleteDate.Enabled = True
            If Me.frameLAExceptionFormApproved = 3 Then
                Me.frameLAExceptionFormApproved = vbNullString
            End If
        End If
    Else
        Me.txtLAExceptionSentDate.Enabled = True
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub frameLAExceptionFormCompleted_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameLAExceptionFormCompleted = vbNullString
    Me.txtLAExceptionSentDate = vbNullString
    Me.txtLAExceptionCompleteDate = vbNullString
    Me.txtLAExceptionSentDate.Enabled = True
    Me.txtLAExceptionCompleteDate.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameLAMLORetention_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameLAMLORetention = 3 Then
        Me.txtRetentionSentDate.Enabled = False
        Me.txtRetentionCompleteDate.Enabled = False
        Me.txtRetentionSentDate = vbNullString
        Me.txtRetentionCompleteDate = vbNullString
    ElseIf Me.frameLAMLORetention = 1 Then
        If Len(Me.txtRetentionSentDate & vbNullString) = 0 Then
            Me.txtRetentionSentDate = Date
            Me.txtRetentionSentDate.Enabled = True
            Me.txtRetentionCompleteDate.Enabled = True
            If Me.cboEmployeeStatus = "Notice Received" Then
                Me.cboEmployeeStatus = "In Process"
                MsgBox "Employee Status has been changed to In Process"
            End If
        End If
    Else
        Me.txtRetentionSentDate.Enabled = True
        Me.txtRetentionCompleteDate.Enabled = True
                
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub frameLAMLORetention_DblClick(Cancel As Integer)

On Error GoTo Stop_Err

    Me.frameLAMLORetention = vbNullString
    Me.txtRetentionSentDate = vbNullString
    Me.txtRetentionCompleteDate = vbNullString
    Me.txtRetentionSentDate.Enabled = True
    Me.txtRetentionCompleteDate.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub frameMU4RFlag_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameMU4RFlag = 2 Then
        Me.txtMU4RVerifiedDate = vbNullString
        Me.txtMU4RVerifiedDate.Enabled = False
    ElseIf Me.frameMU4RFlag = 1 Then
        If Len(Me.txtMU4RVerifiedDate & vbNullString) = 0 Then
            Me.txtMU4RVerifiedDate = Date
            Me.txtMU4RVerifiedDate.Enabled = True
        End If
    Else
        Me.txtMU4RVerifiedDate.Enabled = True
    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
    
End Sub

Private Sub frameMU4RFlag_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameMU4RFlag = vbNullString
    Me.txtMU4RVerifiedDate = vbNullString
    Me.txtMU4RVerifiedDate.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub frameMU4RFlag_Excep_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameMU4RFlag_Excep = 2 Then
        Me.txtMU4RVerifiedDate_Excep = vbNullString
        Me.txtMU4RVerifiedDate_Excep.Enabled = False
    ElseIf Me.frameMU4RFlag_Excep = 1 Then
        If Len(Me.txtMU4RVerifiedDate_Excep & vbNullString) = 0 Then
            Me.txtMU4RVerifiedDate_Excep = Date
            Me.txtMU4RVerifiedDate_Excep.Enabled = True
        End If
    Else
        Me.txtMU4RVerifiedDate_Excep.Enabled = True
    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
    
End Sub
Private Sub frameMU4RFlag_Excep_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameMU4RFlag_Excep = vbNullString
    Me.txtMU4RVerifiedDate_Excep = vbNullString
    Me.txtMU4RVerifiedDate_Excep.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub
Private Sub frameMU4RFlag_Promo_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameMU4RFlag_Promo = 2 Then
        Me.txtMU4RVerifiedDate_Promo = vbNullString
        Me.txtMU4RVerifiedDate_Promo.Enabled = False
    ElseIf Me.frameMU4RFlag_Promo = 1 Then
        If Len(Me.txtMU4RVerifiedDate_Promo & vbNullString) = 0 Then
            Me.txtMU4RVerifiedDate_Promo = Date
            Me.txtMU4RVerifiedDate_Promo.Enabled = True
        End If
    Else
        Me.txtMU4RVerifiedDate_Promo.Enabled = True
    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub
Private Sub frameMU4RFlag_Promo_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameMU4RFlag_Promo = vbNullString
    Me.txtMU4RVerifiedDate_Promo = vbNullString
    Me.txtMU4RVerifiedDate_Promo.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub
Private Sub frameNewEmailSig_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameNewEmailSig = 2 Then
        Me.txtNewEmailSigDate = vbNullString
        Me.txtNewEmailSigDate.Enabled = False
    ElseIf Me.frameNewEmailSig = 1 Then
        If Len(Me.txtNewEmailSigDate & vbNullString) = 0 Then
            Me.txtNewEmailSigDate = Date
            Me.txtNewEmailSigDate.Enabled = True
        End If
    Else
        Me.txtNewEmailSigDate.Enabled = True
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub frameNewEmailSig_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameNewEmailSig = vbNullString
    Me.txtNewEmailSigDate = vbNullString
    Me.txtNewEmailSigDate.Enabled = True
    
Stop_Exit:
    Exit Sub
    
Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub frameNewEmailSig_Excep_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameNewEmailSig_Excep = 2 Then
        Me.txtNewEmailSigDate_Excep = vbNullString
        Me.txtNewEmailSigDate_Excep.Enabled = False
    ElseIf Me.frameNewEmailSig_Excep = 1 Then
        If Len(Me.txtNewEmailSigDate_Excep & vbNullString) = 0 Then
            Me.txtNewEmailSigDate_Excep = Date
            Me.txtNewEmailSigDate_Excep.Enabled = True
        End If
    Else
        Me.txtNewEmailSigDate_Excep.Enabled = True
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub
Private Sub frameNewEmailSig_Excep_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameNewEmailSig_Excep = vbNullString
    Me.txtNewEmailSigDate_Excep = vbNullString
    Me.txtNewEmailSigDate_Excep.Enabled = True
    
Stop_Exit:
    Exit Sub
    
Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub


Private Sub frameNewEmailSig_Promo_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameNewEmailSig_Promo = 2 Then
        Me.txtNewEmailSigDate_Promo = vbNullString
        Me.txtNewEmailSigDate_Promo.Enabled = False
    ElseIf Me.frameNewEmailSig_Promo = 1 Then
        If Len(Me.txtNewEmailSigDate_Promo & vbNullString) = 0 Then
            Me.txtNewEmailSigDate_Promo = Date
            Me.txtNewEmailSigDate_Promo.Enabled = True
        End If
    Else
        Me.txtNewEmailSigDate_Promo.Enabled = True
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub
Private Sub frameNewEmailSig_Promo_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameNewEmailSig_Promo = vbNullString
    Me.txtNewEmailSigDate_Promo = vbNullString
    Me.txtNewEmailSigDate_Promo.Enabled = True
    
Stop_Exit:
    Exit Sub
    
Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub
Private Sub frameReplyEmailSig_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameReplyEmailSig = 2 Then
        Me.txtReplyEmailSigDate = vbNullString
        Me.txtReplyEmailSigDate.Enabled = False
    ElseIf Me.frameReplyEmailSig = 1 Then
        If Len(Me.txtReplyEmailSigDate & vbNullString) = 0 Then
            Me.txtReplyEmailSigDate = Date
            Me.txtReplyEmailSigDate.Enabled = True
        End If
    Else
        Me.txtReplyEmailSigDate.Enabled = True
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
    
End Sub
Private Sub frameReplyEmailSig_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameReplyEmailSig = vbNullString
    Me.txtReplyEmailSigDate = vbNullString
    Me.txtReplyEmailSigDate.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub
Private Sub frameReplyEmailSig_Excep_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameReplyEmailSig_Excep = 2 Then
        Me.txtReplyEmailSigDate_Excep = vbNullString
        Me.txtReplyEmailSigDate_Excep.Enabled = False
    ElseIf Me.frameReplyEmailSig_Excep = 1 Then
        If Len(Me.txtReplyEmailSigDate_Excep & vbNullString) = 0 Then
            Me.txtReplyEmailSigDate_Excep = Date
            Me.txtReplyEmailSigDate_Excep.Enabled = True
        End If
    Else
        Me.txtReplyEmailSigDate_Excep.Enabled = True
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub
Private Sub frameReplyEmailSig_Excep_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameReplyEmailSig_Excep = vbNullString
    Me.txtReplyEmailSigDate_Excep = vbNullString
    Me.txtReplyEmailSigDate_Excep.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub
Private Sub frameReplyEmailSig_Promo_AfterUpdate()
On Error GoTo Stop_Err

    If Me.frameReplyEmailSig_Promo = 2 Then
        Me.txtReplyEmailSigDate_Promo = vbNullString
        Me.txtReplyEmailSigDate_Promo.Enabled = False
    ElseIf Me.frameReplyEmailSig_Promo = 1 Then
        If Len(Me.txtReplyEmailSigDate_Promo & vbNullString) = 0 Then
            Me.txtReplyEmailSigDate_Promo = Date
            Me.txtReplyEmailSigDate_Promo.Enabled = True
        End If
    Else
        Me.txtReplyEmailSigDate_Promo.Enabled = True
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub
Private Sub frameReplyEmailSig_Promo_DblClick(Cancel As Integer)
On Error GoTo Stop_Err

    Me.frameReplyEmailSig_Promo = vbNullString
    Me.txtReplyEmailSigDate_Promo = vbNullString
    Me.txtReplyEmailSigDate_Promo.Enabled = True
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub lblAllTemplates_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates")
End Sub

Private Sub lblAlscomeNotification_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Template for ALSCOM Access Restrictions.docx")
End Sub

Private Sub lblBusinessCards_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Business Card Orders")
End Sub

Private Sub lblBusinessCards_Transfers_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Business Card Orders")
End Sub

Private Sub lblBusinessCards_Excep_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Business Card Orders")
End Sub

Private Sub lblBusinessCards_Promo_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Business Card Orders")
End Sub

Private Sub lblDirectory_Click()
    FollowHyperlink ("S:\Shared Forms, Instructions, etc\Human Resources\Branch & Department Listings")
End Sub

Private Sub lblDirectory_Transfers_Click()
    FollowHyperlink ("S:\Shared Forms, Instructions, etc\Administration\Branch Directory Information\Branch Directory.xlsm")
End Sub

Private Sub lblDirectory_Excep_Click()
    FollowHyperlink ("S:\Shared Forms, Instructions, etc\Administration\Branch Directory Information\Branch Directory.xlsm")
End Sub

Private Sub lblDirectory_Promo_Click()
    FollowHyperlink ("S:\Shared Forms, Instructions, etc\Administration\Branch Directory Information\Branch Directory.xlsm")
End Sub

Private Sub lblEmailMLORetention_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Template for Internal Transfers and LA Transfers.docx")
End Sub

Private Sub lblFixSig_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Fix Email Template.docx")
End Sub

Private Sub lblFixSig_Excep_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Fix Email Template.docx")
End Sub

Private Sub lblFixSig_Promo_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Fix Email Template.docx")
End Sub

Private Sub lblFixSig_Transfers_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Fix Email Template.docx")
End Sub

Private Sub lblHMDAExpert_Click()
    FollowHyperlink ("S:\Shared Forms, Instructions, etc\Loan Administration\Lending Integrity\Quality Control\Archives\HMDA\HMDA Expert List.xlsx")
End Sub

Private Sub lblHMDAExpertLink_Click()
    FollowHyperlink ("S:\Shared Forms, Instructions, etc\Loan Administration\Lending Integrity\Quality Control\Archives\HMDA\HMDA Expert List.xlsx")
End Sub

Private Sub lblHRTextRoster_Click()
    FollowHyperlink ("R:\Loan Administration\Loan Originations\Automated Reports\Safe Act MLO Files\SAFE.ACT.MLO.FILE.TXT")
End Sub

Private Sub lblLAExceptionEmail_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\LAMLO Email for Exception Request.msg")
End Sub

Private Sub lblLAExceptionForm_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\LA MLO Exception.doc")
End Sub

Private Sub lblLAMLOList_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Loan Administration MLOs.xlsx")
End Sub

Private Sub lblLAMLOList_Transfers_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Loan Administration MLOs.xlsx")
End Sub

Private Sub lblMLOComp_Click()
    FollowHyperlink ("\\pfil9903\Departments\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Saved Roster Comparisons")
End Sub

Private Sub lblNewEmail_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Initial Email Template.docx")
End Sub

Private Sub lblNewEmail_Excep_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Initial Email Template.docx")
End Sub

Private Sub lblNewEmail_Promo_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Initial Email Template.docx")
End Sub

Private Sub lblNewEmail_Transfers_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Initial Email Template.docx")
End Sub

Private Sub lblQuickReferenceGuides_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Quick References")
End Sub

Private Sub lblSAFEActRoster_Click()
    FollowHyperlink ("S:\Shared Forms, Instructions, etc\Loan Administration\SAFE Act - Active MLO List\Roster.xls")
End Sub

Private Sub lblTransferEmail_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Transfer Email Template.docx")
End Sub

Private Sub lblTransferEmail_Excep_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Transfer Email Template.docx")
End Sub

Private Sub lblTransferEmail_Promo_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Transfer Email Template.docx")
End Sub

Private Sub lblTransferEmail_Transfers_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Transfer Email Template.docx")
End Sub

Private Sub lblTransferNotNeedMLONum_Click()
    FollowHyperlink ("R:\Loan Administration\Lending Integrity\Loan Compliance\Routine\SAFE Act\Initial and Transfer MLO Email Verification\Templates\Transfer Email Template - Transfer Not Need MLO Number.docx")
End Sub



Private Sub txtAlscomNoteSentDate_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtAlscomNoteCompleteDate & vbNullString) > 0 Then
        Me.frameAlscomNotified = 1
        Me.txtAlscomNoteSentDate.Enabled = True
        Me.txtAlscomNoteCompleteDate.Enabled = True
'    Else
'        Me.frameAlscomNotified = 2
'        Me.txtAlscomNoteSentDate.Enabled = False
'        Me.txtAlscomNoteCompleteDate.Enabled = False
       
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtAlscomNoteSentDate_LA_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtAlscomNoteCompleteDate_LA & vbNullString) > 0 Then
        Me.frameAlscomNotified_LA = 1
        Me.txtAlscomNoteSentDate_LA.Enabled = True
        Me.txtAlscomNoteCompleteDate_LA.Enabled = True
'    Else
'        Me.frameAlscomNotified_LA = 2
'        Me.txtAlscomNoteSentDate_LA.Enabled = False
'        Me.txtAlscomNoteCompleteDate_LA.Enabled = False
       
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtBusinessCardDate_AfterUpdate()
On Error GoTo Stop_Err

    If Len(Me.txtBusinessCardDate & vbNullString) > 0 Then
        Me.frameBusinessCards = 1
        Me.txtBusinessCardDate.Enabled = True
    ElseIf Len(Me.txtBusinessCardDate & vbNullString) = 0 And Me.txtBusinessCardDate.Enabled = False _
                And Me.frameBusinessCards <> 1 And IsNull(Me.frameBusinessCards) = False Then
        Me.frameBusinessCards = 2
        Me.txtBusinessCardDate.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
    
End Sub

Private Sub txtBusinessCardDate_Excep_AfterUpdate()
On Error GoTo Stop_Err

    If Len(Me.txtBusinessCardDate_Excep & vbNullString) > 0 Then
        Me.frameBusinessCards_Excep = 1
        Me.txtBusinessCardDate_Excep.Enabled = True
    ElseIf Len(Me.txtBusinessCardDate_Excep & vbNullString) = 0 And Me.txtBusinessCardDate_Excep.Enabled = False _
                And Me.frameBusinessCards_Excep <> 1 And IsNull(Me.frameBusinessCards_Excep) = False Then
        Me.frameBusinessCards_Excep = 2
        Me.txtBusinessCardDate_Excep.Enabled = False
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtBusinessCardDate_Promo_AfterUpdate()
On Error GoTo Stop_Err

    If Len(Me.txtBusinessCardDate_Promo & vbNullString) > 0 Then
        Me.frameBusinessCards_Promo = 1
        Me.txtBusinessCardDate_Promo.Enabled = True
    ElseIf Len(Me.txtBusinessCardDate_Promo & vbNullString) = 0 And Me.txtBusinessCardDate_Promo.Enabled = False _
                And Me.frameBusinessCards_Promo <> 1 And IsNull(Me.frameBusinessCards_Promo) = False Then
        Me.frameBusinessCards_Promo = 2
        Me.txtBusinessCardDate_Promo.Enabled = False
    End If
    

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtExcepDateHRNotified_AfterUpdate()

    If Me.cboEmployeeGroup = "Exception" Then
        Me.txtExcepDateHRNotified.Enabled = True
    End If

End Sub

Private Sub txtInitialDateNotified_AfterUpdate()

    If Len(Me.cboEmployeeGroup & vbNullString) > 0 Then
        If Me.chkNotifiedByHR = True Then
            If IsDate(Me.txtInitialDateNotified) Then
                Me.txtInitialDateNotified_HR = Me.txtInitialDateNotified
            End If
        Else
            If IsDate(Me.txtInitialDateNotified) Then
                Me.txtInitialDateNotified_LO = Me.txtInitialDateNotified
            End If
        End If
    End If

End Sub

Private Sub txtInitialDateNotified_HR_AfterUpdate()

    If Me.cboEmployeeGroup = "Promotion" Then
        Me.txtVerificationDeadline = dhNextWorkdayA(Me.txtInitialDateNotified_HR.Value + 60)
    End If
    
    If IsDate(Me.txtInitialDateNotified_HR) Then
        Me.txtInitialDateNotified = Me.txtInitialDateNotified_HR
        Me.chkNotifiedByHR = True
    End If
    
'    If Me.chkNotifiedByHR = True Then
'        If IsDate(Me.txtInitialDateNotified) Then
'            Me.txtInitialDateNotified_HR = Me.txtInitialDateNotified
'        End If
'    End If

End Sub

Private Sub txtInitialDateNotified_LO_AfterUpdate()

    If Me.cboEmployeeGroup = "Exception" Then
        Me.txtVerificationDeadline = dhNextWorkdayA(Me.txtInitialDateNotified_LO.Value + 60)
    End If

    If IsDate(Me.txtInitialDateNotified_LO) Then
        Me.txtInitialDateNotified = Me.txtInitialDateNotified_LO
        Me.chkNotifiedByHR = False
    End If
    
'    If Me.chkNotifiedByHR = False Then
'        If IsDate(Me.txtInitialDateNotified) Then
'            Me.txtInitialDateNotified_LO = Me.txtInitialDateNotified
'        End If
'    End If

End Sub

Private Sub txtInitialVerificationRequest_AfterUpdate()
On Error GoTo Stop_Err
    
    If Len(Me.txtInitialVerificationRequest & vbNullString) > 0 Then
        If Me.cboEmployeeStatus = "Notice Received" Then
                Me.cboEmployeeStatus = "In Process"
                MsgBox "Employee Status has been changed to In Process"
            End If
    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtInitialVerificationRequest_Excep_AfterUpdate()
On Error GoTo Stop_Err
    
    If Len(Me.txtInitialVerificationRequest_Excep & vbNullString) > 0 Then
        If Me.cboEmployeeStatus = "Notice Received" Then
                Me.cboEmployeeStatus = "In Process"
                MsgBox "Employee Status has been changed to In Process"
            End If
    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtInitialVerificationRequest_Promo_AfterUpdate()
On Error GoTo Stop_Err
    
    If Len(Me.txtInitialVerificationRequest_Promo & vbNullString) > 0 Then
        If Me.cboEmployeeStatus = "Notice Received" Then
                Me.cboEmployeeStatus = "In Process"
                MsgBox "Employee Status has been changed to In Process"
            End If
    End If
    
Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtLAExceptionSentDate_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtLAExceptionSentDate & vbNullString) > 0 Then
        Me.frameLAExceptionFormCompleted = 1
        Me.txtLAExceptionSentDate.Enabled = True
        Me.txtLAExceptionCompleteDate.Enabled = True
'    Else
'       Me.frameLAExceptionFormCompleted = 2
'        Me.txtLAExceptionSentDate.Enabled = False
'        Me.txtLAExceptionCompleteDate.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtMU4RVerifiedDate_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtMU4RVerifiedDate & vbNullString) > 0 Then
        Me.frameMU4RFlag = 1
        Me.txtMU4RVerifiedDate.Enabled = True
'    Else 'If Len(Me.txtMU4RVerifiedDate & vbNullString) = 0 Then
'        Me.frameMU4RFlag = 2
'        Me.txtMU4RVerifiedDate.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub


Private Sub txtMU4RVerifiedDate_Excep_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtMU4RVerifiedDate_Excep & vbNullString) > 0 Then
        Me.frameMU4RFlag_Excep = 1
        Me.txtMU4RVerifiedDate_Excep.Enabled = True
'    Else 'If Len(Me.txtMU4RVerifiedDate_Excep & vbNullString) = 0 Then
'        Me.frameMU4RFlag_Excep = 2
'        Me.txtMU4RVerifiedDate_Excep.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtMU4RVerifiedDate_Promo_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtMU4RVerifiedDate_Promo & vbNullString) > 0 Then
        Me.frameMU4RFlag_Promo = 1
        Me.txtMU4RVerifiedDate_Promo.Enabled = True
'    Else 'If Len(Me.txtMU4RVerifiedDate_Promo & vbNullString) = 0 Then
'        Me.frameMU4RFlag_Promo = 2
'        Me.txtMU4RVerifiedDate_Promo.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtNewEmailSigDate_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtNewEmailSigDate & vbNullString) > 0 Then
        Me.frameNewEmailSig = 1
        Me.txtNewEmailSigDate.Enabled = True
'    Else
'        Me.frameNewEmailSig = 2
'        Me.txtNewEmailSigDate.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub


Private Sub txtNewEmailSigDate_Excep_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtNewEmailSigDate_Excep & vbNullString) > 0 Then
        Me.frameNewEmailSig_Excep = 1
        Me.txtNewEmailSigDate_Excep.Enabled = True
'    Else
'        Me.frameNewEmailSig_Excep = 2
'        Me.txtNewEmailSigDate_Excep.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtNewEmailSigDate_Promo_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtNewEmailSigDate_Promo & vbNullString) > 0 Then
        Me.frameNewEmailSig_Promo = 1
        Me.txtNewEmailSigDate_Promo.Enabled = True
'    Else
'        Me.frameNewEmailSig_Promo = 2
'        Me.txtNewEmailSigDate_Promo.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtReplyEmailSigDate_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtReplyEmailSigDate & vbNullString) > 0 Then
        Me.frameReplyEmailSig = 1
        Me.txtReplyEmailSigDate.Enabled = True
'    Else
'        Me.frameReplyEmailSig = 2
'        Me.txtReplyEmailSigDate.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub


Private Sub txtReplyEmailSigDate_Excep_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtReplyEmailSigDate_Excep & vbNullString) > 0 Then
        Me.frameReplyEmailSig_Excep = 1
        Me.txtReplyEmailSigDate_Excep.Enabled = True
'    Else
'        Me.frameReplyEmailSig_Excep = 2
'        Me.txtReplyEmailSigDate_Excep.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtReplyEmailSigDate_Promo_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtReplyEmailSigDate_Promo & vbNullString) > 0 Then
        Me.frameReplyEmailSig_Promo = 1
        Me.txtReplyEmailSigDate_Promo.Enabled = True
'    Else
'        Me.frameReplyEmailSig_Promo = 2
'        Me.txtReplyEmailSigDate_Promo.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtRetentionSentDate_AfterUpdate()
On Error GoTo Stop_Err
    If Len(Me.txtRetentionSentDate & vbNullString) > 0 Then
        Me.frameLAMLORetention = 1
        Me.txtRetentionSentDate.Enabled = True
        Me.txtRetentionCompleteDate.Enabled = True
        If Me.cboEmployeeStatus = "Notice Received" Then
                Me.cboEmployeeStatus = "In Process"
                MsgBox "Employee Status has been changed to In Process"
            End If
'    Else
'       Me.frameLAMLORetention = 2
'        Me.txtRetentionSentDate.Enabled = False
'        Me.txtRetentionCompleteDate.Enabled = False
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume
End Sub

Private Sub txtTPEDate_AfterUpdate()

    Me.txtVerificationDeadline = dhNextWorkdayA(Me.txtTPEDate.Value + 21)

End Sub

Private Sub txtTPENotes_KeyDown(KeyCode As Integer, Shift As Integer)
    If Me.TabCtl0.Pages(1).Visible Then
        If KeyCode = 9 Then
            Me.cboLATransferFlag.SetFocus
        End If
    End If
End Sub

Private Sub CompletedTagCheck()
On Error GoTo Stop_Err

Dim bFoundError As Boolean
Dim ctl As Control
Dim strTag As String
Dim strTab As String
Dim strGroup As String
Dim ctrltype As String

    If Len(Me.cboEmployeeGroup & vbNullString) > 0 Then
        strGroup = Me.cboEmployeeGroup.Value
    ElseIf Len(Me.cboEmpID & Me.cboEmployeeName & vbNullString) > 0 Then
        MsgBox "Please select a Group for the Employee."
        Me.cboEmployeeStatus = "Notice Received"
        Exit Sub
    End If
    
    For Each ctl In Me.Controls
        If TypeName(ctl) = "TextBox" Or TypeName(ctl) = "ComboBox" Or TypeName(ctl) = "OptionGroup" Then
            If ctl.BackColor = vbYellow Then
                ctl.BackColor = vbWindowBackground
            End If
        End If
    Next ctl
    
    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)
    Me.txtFollowUpDate.Enabled = True
    
    bFoundError = False

    If Me.cboEmployeeStatus = "Completed" Then
        For Each ctl In Me.Controls
            If TypeName(ctl) = "TextBox" Or TypeName(ctl) = "ComboBox" Or TypeName(ctl) = "OptionGroup" Then
                If ctl.Enabled = True Then
                    strTag = Left(ctl.Tag, 3)
                    If strTag = "Req" Then
                        strTab = Right(ctl.Tag, 2)
                        If strTab = "eq" Then
                            If Len(ctl & vbNullString) = 0 Then
                                ctl.BackColor = vbYellow
                                bFoundError = True
                            End If
                        End If
                        Select Case strGroup
                            Case "Transfer"
                                If strTab = "Tr" Then
                                    If Len(ctl & vbNullString) = 0 Then
                                        ctl.BackColor = vbYellow
                                        bFoundError = True
                                    End If
                                End If
                            Case "Promotion"
                                If strTab = "Pr" Then
                                    If Len(ctl & vbNullString) = 0 Then
                                        ctl.BackColor = vbYellow
                                        bFoundError = True
                                    End If
                                End If
                            Case "Exception"
                                If strTab = "Ex" Then
                                    If Len(ctl & vbNullString) = 0 Then
                                        ctl.BackColor = vbYellow
                                        bFoundError = True
                                    End If
                                End If
                            Case "Hire/Rehire"
                                If strTab = "Pr" Or strTab = "Hi" Then
                                    If Len(ctl & vbNullString) = 0 Then
                                        ctl.BackColor = vbYellow
                                        bFoundError = True
                                    End If
                                End If
                        End Select
                    End If
                End If
            End If
        Next ctl
        
        If DLookup("PreConversionFlag", "tblSafeActData", "[ID]=" & Me.txtRecordID) = False Then
            If bFoundError Then
                MsgBox "Please fill in the highlighted fields before proceeding!"
                Me.btnSaveRecord.BackColor = RGB(255, 128, 0)
                Me.cboEmployeeStatus = "In Process"
            Else
                Me.btnSaveRecord.BackColor = RGB(197, 217, 241)
                Me.txtFollowUpDate = vbNullString
                Me.txtFollowUpDate.Enabled = False
                Me.txtDateLastModified = Now
                If Me.Dirty Then
                    Me.Dirty = False
                End If
            End If
        End If
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume

End Sub

Private Sub CheckFollowUpDate()
On Error GoTo Stop_Err

    Me.btnSaveRecord.BackColor = RGB(197, 217, 241)
    Me.txtFollowUpDate.BackColor = vbWindowBackground

    If Me.cboEmployeeStatus = "In Process" Then
        If Len(Me.txtFollowUpDate & vbNullString) = 0 Then
            Me.txtFollowUpDate.BackColor = RGB(255, 51, 51)
            MsgBox "Please enter a Follow-up Date!"
        Else
            If IsDate(Me.txtFollowUpDate) = True Then
                If Me.txtFollowUpDate <= Date Then
                    Me.txtFollowUpDate.BackColor = RGB(255, 51, 51)
                    MsgBox "Please enter a new Follow-up Date!"
                End If
            End If
        End If
        
    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub

Private Sub PopulateDateNotified()
On Error GoTo Stop_Err

'    If Len(Me.cboEmployeeGroup & vbNullString) > 0 Then
'        If Me.chkNotifiedByHR Then
'            If IsDate(Me.txtInitialDateNotified) Then
'                Me.txtInitialDateNotified_HR = Me.txtInitialDateNotified
'            End If
'        Else
'            If IsDate(Me.txtInitialDateNotified) Then
'                Me.InitialDateNotified_LO = Me.txtInitialDateNotified
'            End If
'        End If
'    End If

Stop_Exit:
    Exit Sub

Stop_Err:
    MsgBox Err.Number & ":  " & Err.Description
    Resume Stop_Exit
    Resume


End Sub
